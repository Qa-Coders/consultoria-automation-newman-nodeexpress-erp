{
	"info": {
		"_postman_id": "6c56d04b-6e69-4db4-a6f7-746d57dbf9a4",
		"name": "AutomacaoPartners",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25329779"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "POST login (SYSADMIN)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST login (SYSADMIN) - Validar status 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"tokenSYSADMIN\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mail\": \"sysadmin@qacoders.com\",\r\n    \"password\": \"1234@Test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST register user (ADMIN)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST register user (ADMIN) - Validar status 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"mailADMIN\", jsonData.user.mail);\r",
									"pm.environment.set(\"idADMIN\", jsonData.user._id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{tokenSYSADMIN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"fullName\": \"ADMIN Consultoria\",\r\n\t\"mail\": \"admin.consultoria{{numero}}@qacoders-treinamento.com\",\r\n\t\"password\": \"1234@Test\",\r\n    \"confirmPassword\": \"1234@Test\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{cpf}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/user/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST login (ADMIN)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST login (ADMIN) - Validar status 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"tokenADMIN\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mail\": \"{{mailADMIN}}\",\r\n    \"password\": \"1234@Test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "GET, POST e PUT - campos informados corretamente",
					"item": [
						{
							"name": "GET count user - antes \"POST register user (STUDENT)\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"GET count user - antes \\\"POST register user (STUDENT)\\\" - Validar status 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"countUserAntesPostRegUserSTUDENT\", jsonData.count);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{tokenADMIN}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/user/count",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST register user (STUDENT)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var msgObtida = jsonData.msg;\r",
											"var userIdObtido = jsonData.user._id;\r",
											"var userFullNameObtido = jsonData.user.fullName;\r",
											"var userMailObtido = jsonData.user.mail;\r",
											"var userAccessProfileObtido = jsonData.user.accessProfile;\r",
											"var userCpfObtido = jsonData.user.cpf;\r",
											"var userStatusObtido = jsonData.user.status;\r",
											"var auditRegisteredByUserIdObtido = jsonData.user.audit[0].registeredBy.userId;\r",
											"var auditRegisteredByUserLoginObtido = jsonData.user.audit[0].registeredBy.userLogin;\r",
											"var auditRegistrationDateObtido = jsonData.user.audit[0].registrationDate;\r",
											"var auditRegistrationNumberObtido = jsonData.user.audit[0].registrationNumber;\r",
											"var auditIdObtido = jsonData.user.audit[0]._id;\r",
											"var vObtido = jsonData.user.__v;\r",
											"\r",
											"var msgEsperada = \"Olá Teste User STUDENT Consultoria cadastro realizado com sucesso.\";\r",
											"var userFullNameEsperado = \"Teste User STUDENT Consultoria\";\r",
											"var userMailEsperado = \"teste.user.student.consultoria@qacoders-treinamento.com\";\r",
											"var userAccessProfileEsperado = \"STUDENT\";\r",
											"var userCpfEsperado = \"01234567890\";\r",
											"var userStatusEsperado = true;\r",
											"var auditRegistrationNumberEsperado = \"QaCoders-\";\r",
											"var postRegisterUserSTUDENTSchemaEsperado = pm.environment.get(\"postRegisterUserSTUDENTSchema\");\r",
											"\r",
											"var estruturaEValida = tv4.validate(jsonData, postRegisterUserSTUDENTSchemaEsperado);\r",
											"if(!estruturaEValida)\r",
											"    console.error(tv4.error);\r",
											"\r",
											"pm.test(\"POST register user (STUDENT) - Validar status 201 Created, dados retornados com sucesso e com schema/estrututura válida\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"\r",
											"    pm.expect(msgObtida).to.include(msgEsperada);\r",
											"    pm.expect(userIdObtido).is.not.null;\r",
											"    pm.expect(userFullNameObtido).to.include(userFullNameEsperado);\r",
											"    pm.expect(userMailObtido).to.include(userMailEsperado);\r",
											"    pm.expect(userAccessProfileObtido).to.include(userAccessProfileEsperado);\r",
											"    pm.expect(userCpfObtido).to.include(userCpfEsperado);\r",
											"    pm.expect(userStatusObtido).to.eq(userStatusEsperado);\r",
											"    pm.expect(auditRegisteredByUserIdObtido).is.not.null;\r",
											"    pm.expect(auditRegisteredByUserLoginObtido).is.not.null;\r",
											"    pm.expect(auditRegistrationDateObtido).is.not.null;\r",
											"    pm.expect(auditRegistrationNumberObtido).to.include(auditRegistrationNumberEsperado);\r",
											"    pm.expect(auditIdObtido).is.not.null;\r",
											"    pm.expect(vObtido).is.not.null;\r",
											"\r",
											"    pm.expect(estruturaEValida).to.be.true;\r",
											"});\r",
											"\r",
											"pm.environment.set(\"idSTUDENT\", userIdObtido);\r",
											"pm.environment.set(\"mailSTUDENT\", userMailObtido);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"postRegisterUserSTUDENTSchema\",\r",
											"{\r",
											"    \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",\r",
											"    \"$id\": \"http://example.com/example.json\",\r",
											"    \"type\": \"object\",\r",
											"    \"default\": {},\r",
											"    \"title\": \"Root Schema\",\r",
											"    \"required\": [\r",
											"        \"msg\",\r",
											"        \"user\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"msg\": {\r",
											"            \"type\": \"string\",\r",
											"            \"default\": \"\",\r",
											"            \"title\": \"The msg Schema\",\r",
											"            \"examples\": [\r",
											"                \"Olá Teste User STUDENT Consultoria cadastro realizado com sucesso.\"\r",
											"            ]\r",
											"        },\r",
											"        \"user\": {\r",
											"            \"type\": \"object\",\r",
											"            \"default\": {},\r",
											"            \"title\": \"The user Schema\",\r",
											"            \"required\": [\r",
											"                \"_id\",\r",
											"                \"fullName\",\r",
											"                \"mail\",\r",
											"                \"accessProfile\",\r",
											"                \"cpf\",\r",
											"                \"status\",\r",
											"                \"audit\",\r",
											"                \"__v\"\r",
											"            ],\r",
											"            \"properties\": {\r",
											"                \"_id\": {\r",
											"                    \"type\": \"string\",\r",
											"                    \"default\": \"\",\r",
											"                    \"title\": \"The _id Schema\",\r",
											"                    \"examples\": [\r",
											"                        \"64efa48781990e77e042e811\"\r",
											"                    ]\r",
											"                },\r",
											"                \"fullName\": {\r",
											"                    \"type\": \"string\",\r",
											"                    \"default\": \"\",\r",
											"                    \"title\": \"The fullName Schema\",\r",
											"                    \"examples\": [\r",
											"                        \"Teste User STUDENT Consultoria\"\r",
											"                    ]\r",
											"                },\r",
											"                \"mail\": {\r",
											"                    \"type\": \"string\",\r",
											"                    \"default\": \"\",\r",
											"                    \"title\": \"The mail Schema\",\r",
											"                    \"examples\": [\r",
											"                        \"teste.user.student.consultoria@qacoders-treinamento.com\"\r",
											"                    ]\r",
											"                },\r",
											"                \"accessProfile\": {\r",
											"                    \"type\": \"string\",\r",
											"                    \"default\": \"\",\r",
											"                    \"title\": \"The accessProfile Schema\",\r",
											"                    \"examples\": [\r",
											"                        \"STUDENT\"\r",
											"                    ]\r",
											"                },\r",
											"                \"cpf\": {\r",
											"                    \"type\": \"string\",\r",
											"                    \"default\": \"\",\r",
											"                    \"title\": \"The cpf Schema\",\r",
											"                    \"examples\": [\r",
											"                        \"01234567890\"\r",
											"                    ]\r",
											"                },\r",
											"                \"status\": {\r",
											"                    \"type\": \"boolean\",\r",
											"                    \"default\": false,\r",
											"                    \"title\": \"The status Schema\",\r",
											"                    \"examples\": [\r",
											"                        true\r",
											"                    ]\r",
											"                },\r",
											"                \"audit\": {\r",
											"                    \"type\": \"array\",\r",
											"                    \"default\": [],\r",
											"                    \"title\": \"The audit Schema\",\r",
											"                    \"items\": {\r",
											"                        \"type\": \"object\",\r",
											"                        \"default\": {},\r",
											"                        \"title\": \"A Schema\",\r",
											"                        \"required\": [\r",
											"                            \"registeredBy\",\r",
											"                            \"registrationDate\",\r",
											"                            \"registrationNumber\",\r",
											"                            \"_id\"\r",
											"                        ],\r",
											"                        \"properties\": {\r",
											"                            \"registeredBy\": {\r",
											"                                \"type\": \"object\",\r",
											"                                \"default\": {},\r",
											"                                \"title\": \"The registeredBy Schema\",\r",
											"                                \"required\": [\r",
											"                                    \"userId\",\r",
											"                                    \"userLogin\"\r",
											"                                ],\r",
											"                                \"properties\": {\r",
											"                                    \"userId\": {\r",
											"                                        \"type\": \"string\",\r",
											"                                        \"default\": \"\",\r",
											"                                        \"title\": \"The userId Schema\",\r",
											"                                        \"examples\": [\r",
											"                                            \"64efa47581990e77e042e807\"\r",
											"                                        ]\r",
											"                                    },\r",
											"                                    \"userLogin\": {\r",
											"                                        \"type\": \"string\",\r",
											"                                        \"default\": \"\",\r",
											"                                        \"title\": \"The userLogin Schema\",\r",
											"                                        \"examples\": [\r",
											"                                            \"admin.consultoria115@qacoders-treinamento.com\"\r",
											"                                        ]\r",
											"                                    }\r",
											"                                },\r",
											"                                \"examples\": [{\r",
											"                                    \"userId\": \"64efa47581990e77e042e807\",\r",
											"                                    \"userLogin\": \"admin.consultoria115@qacoders-treinamento.com\"\r",
											"                                }]\r",
											"                            },\r",
											"                            \"registrationDate\": {\r",
											"                                \"type\": \"string\",\r",
											"                                \"default\": \"\",\r",
											"                                \"title\": \"The registrationDate Schema\",\r",
											"                                \"examples\": [\r",
											"                                    \"quarta-feira, 30/08/2023 17:20:23 BRT\"\r",
											"                                ]\r",
											"                            },\r",
											"                            \"registrationNumber\": {\r",
											"                                \"type\": \"string\",\r",
											"                                \"default\": \"\",\r",
											"                                \"title\": \"The registrationNumber Schema\",\r",
											"                                \"examples\": [\r",
											"                                    \"QaCoders-90\"\r",
											"                                ]\r",
											"                            },\r",
											"                            \"_id\": {\r",
											"                                \"type\": \"string\",\r",
											"                                \"default\": \"\",\r",
											"                                \"title\": \"The _id Schema\",\r",
											"                                \"examples\": [\r",
											"                                    \"64efa48781990e77e042e812\"\r",
											"                                ]\r",
											"                            }\r",
											"                        },\r",
											"                        \"examples\": [{\r",
											"                            \"registeredBy\": {\r",
											"                                \"userId\": \"64efa47581990e77e042e807\",\r",
											"                                \"userLogin\": \"admin.consultoria115@qacoders-treinamento.com\"\r",
											"                            },\r",
											"                            \"registrationDate\": \"quarta-feira, 30/08/2023 17:20:23 BRT\",\r",
											"                            \"registrationNumber\": \"QaCoders-90\",\r",
											"                            \"_id\": \"64efa48781990e77e042e812\"\r",
											"                        }]\r",
											"                    },\r",
											"                    \"examples\": [\r",
											"                        [{\r",
											"                            \"registeredBy\": {\r",
											"                                \"userId\": \"64efa47581990e77e042e807\",\r",
											"                                \"userLogin\": \"admin.consultoria115@qacoders-treinamento.com\"\r",
											"                            },\r",
											"                            \"registrationDate\": \"quarta-feira, 30/08/2023 17:20:23 BRT\",\r",
											"                            \"registrationNumber\": \"QaCoders-90\",\r",
											"                            \"_id\": \"64efa48781990e77e042e812\"\r",
											"                        }]\r",
											"                    ]\r",
											"                },\r",
											"                \"__v\": {\r",
											"                    \"type\": \"integer\",\r",
											"                    \"default\": 0,\r",
											"                    \"title\": \"The __v Schema\",\r",
											"                    \"examples\": [\r",
											"                        0\r",
											"                    ]\r",
											"                }\r",
											"            },\r",
											"            \"examples\": [{\r",
											"                \"_id\": \"64efa48781990e77e042e811\",\r",
											"                \"fullName\": \"Teste User STUDENT Consultoria\",\r",
											"                \"mail\": \"teste.user.student.consultoria@qacoders-treinamento.com\",\r",
											"                \"accessProfile\": \"STUDENT\",\r",
											"                \"cpf\": \"01234567890\",\r",
											"                \"status\": true,\r",
											"                \"audit\": [{\r",
											"                    \"registeredBy\": {\r",
											"                        \"userId\": \"64efa47581990e77e042e807\",\r",
											"                        \"userLogin\": \"admin.consultoria115@qacoders-treinamento.com\"\r",
											"                    },\r",
											"                    \"registrationDate\": \"quarta-feira, 30/08/2023 17:20:23 BRT\",\r",
											"                    \"registrationNumber\": \"QaCoders-90\",\r",
											"                    \"_id\": \"64efa48781990e77e042e812\"\r",
											"                }],\r",
											"                \"__v\": 0\r",
											"            }]\r",
											"        }\r",
											"    },\r",
											"    \"examples\": [{\r",
											"        \"msg\": \"Olá Teste User STUDENT Consultoria cadastro realizado com sucesso.\",\r",
											"        \"user\": {\r",
											"            \"_id\": \"64efa48781990e77e042e811\",\r",
											"            \"fullName\": \"Teste User STUDENT Consultoria\",\r",
											"            \"mail\": \"teste.user.student.consultoria@qacoders-treinamento.com\",\r",
											"            \"accessProfile\": \"STUDENT\",\r",
											"            \"cpf\": \"01234567890\",\r",
											"            \"status\": true,\r",
											"            \"audit\": [{\r",
											"                \"registeredBy\": {\r",
											"                    \"userId\": \"64efa47581990e77e042e807\",\r",
											"                    \"userLogin\": \"admin.consultoria115@qacoders-treinamento.com\"\r",
											"                },\r",
											"                \"registrationDate\": \"quarta-feira, 30/08/2023 17:20:23 BRT\",\r",
											"                \"registrationNumber\": \"QaCoders-90\",\r",
											"                \"_id\": \"64efa48781990e77e042e812\"\r",
											"            }],\r",
											"            \"__v\": 0\r",
											"        }\r",
											"    }]\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{tokenADMIN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"fullName\": \"Teste User STUDENT Consultoria\",\r\n\t\"mail\": \"teste.user.student.consultoria@qacoders-treinamento.com\",\r\n\t\"password\": \"1234@Test\",\r\n    \"confirmPassword\": \"1234@Test\",\r\n    \"accessProfile\": \"STUDENT\",\r\n    \"cpf\": \"01234567890\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET count user - após \"POST register user (STUDENT)\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var countUserAntesPostRegUserSTUDENTObtido = pm.environment.get(\"countUserAntesPostRegUserSTUDENT\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"var countUserAposPostRegUserSTUDENTObtido = jsonData.count;\r",
											"\r",
											"pm.test(\"GET count user - após \\\"POST register user (STUDENT)\\\" - Validar status 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"\r",
											"    pm.expect(countUserAposPostRegUserSTUDENTObtido).to.gt(countUserAntesPostRegUserSTUDENTObtido);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{tokenADMIN}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/user/count",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"count"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET ALL user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var userSTUDENTIdObtido = pm.environment.get(\"idSTUDENT\");\r",
											"var userSTUDENTMailObtido = pm.environment.get(\"mailSTUDENT\");\r",
											"\r",
											"pm.test(\"GET ALL user - Validar status 200 OK e alguns dados de \\\"POST register user (STUDENT)\\\" retornados com sucesso\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"\r",
											"    pm.expect(pm.response.text()).to.include(userSTUDENTIdObtido && userSTUDENTMailObtido);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{tokenADMIN}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT service user (STUDENT)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var msgObtida = jsonData.msg;\r",
											"var updatedUserIdObtido = jsonData.updatedUser._id;\r",
											"var updatedUserFullNameObtido = jsonData.updatedUser.fullName;\r",
											"var updatedUserMailObtido = jsonData.updatedUser.mail;\r",
											"var updatedUserAccessProfileObtido = jsonData.updatedUser.accessProfile;\r",
											"var updatedUserCpfObtido = jsonData.updatedUser.cpf;\r",
											"var updatedUserStatusObtido = jsonData.updatedUser.status;\r",
											"var auditUpdatedByUserIdObtido = jsonData.updatedUser.audit[1].updatedBy.userId; \r",
											"var auditUpdatedByUserLoginObtido = jsonData.updatedUser.audit[1].updatedBy.userLogin; \r",
											"var auditUpdateDateObtido = jsonData.updatedUser.audit[1].updateDate;\r",
											"var auditIdObtido = jsonData.updatedUser.audit[1]._id;\r",
											"var vObtido = jsonData.updatedUser.__v;\r",
											"\r",
											"var msgEsperada = \"Dados atualizados com sucesso!\";\r",
											"var updatedUserFullNameEsperado = \"Teste User STUDENT Consultoria Alterado\";\r",
											"var updatedUserMailEsperado = \"teste.user.student.consultoria.alterado@qacoders-treinamento.com\";\r",
											"var updatedUserAccessProfileEsperado = \"STUDENT\";\r",
											"var updatedUserCpfEsperado = \"01234567890\";\r",
											"var updatedUserStatusEsperado = true;\r",
											"\r",
											"pm.test(\"PUT service user (STUDENT) - Validar status 200 OK e dados retornados com sucesso\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"\r",
											"    pm.expect(msgObtida).to.include(msgEsperada);\r",
											"    pm.expect(updatedUserIdObtido).is.not.null;\r",
											"    pm.expect(updatedUserFullNameObtido).to.include(updatedUserFullNameEsperado);\r",
											"    pm.expect(updatedUserMailObtido).to.include(updatedUserMailEsperado);\r",
											"    pm.expect(updatedUserAccessProfileObtido).to.include(updatedUserAccessProfileEsperado);\r",
											"    pm.expect(updatedUserCpfObtido).to.include(updatedUserCpfEsperado);\r",
											"    pm.expect(updatedUserStatusObtido).to.eq(updatedUserStatusEsperado);\r",
											"    pm.expect(auditUpdatedByUserIdObtido).is.not.null;\r",
											"    pm.expect(auditUpdatedByUserLoginObtido).is.not.null;\r",
											"    pm.expect(auditUpdateDateObtido).is.not.null;\r",
											"    pm.expect(auditIdObtido).is.not.null;\r",
											"    pm.expect(vObtido).is.not.null;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{tokenADMIN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"fullName\": \"Teste User STUDENT Consultoria Alterado\",\r\n    \"mail\": \"teste.user.student.consultoria.alterado@qacoders-treinamento.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/service/{{idSTUDENT}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"service",
										"{{idSTUDENT}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT password service user (STUDENT)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var msgObtida = jsonData.msg;\r",
											"var msgEsperada = \"Senha atualizada com sucesso!\";\r",
											"\r",
											"pm.test(\"PUT password service user (STUDENT) - Validar status 200 OK e dados retornados com sucesso\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"\r",
											"    pm.expect(msgObtida).to.include(msgEsperada);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{tokenADMIN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"password\": \"1234@Test2\",\r\n\t\"confirmPassword\": \"1234@Test2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/service/password/{{idSTUDENT}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"service",
										"password",
										"{{idSTUDENT}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "POST - campos informados incorretamente",
					"item": [
						{
							"name": "fullName",
							"item": [
								{
									"name": "POST register user (ADMIN) - fullName não informado (vazio)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"var errorObtido = jsonData.error;\r",
													"var errorEsperado = \"O campo nome completo é obrigatório.\";\r",
													"\r",
													"pm.test(\"POST register user (ADMIN) - fullName não informado (vazio) - Validar status 400 Bad Request e dados retornados com erro\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"\r",
													"    pm.expect(errorObtido).to.include(errorEsperado);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{tokenADMIN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"\",\r\n    \"mail\": \"teste.user.admin.consultoria{{numero}}@qacoders-treinamento.com\",\r\n    \"password\": \"1234@Test\",\r\n    \"confirmPassword\": \"1234@Test\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{cpf}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST register user (ADMIN) - fullName contendo 101 caracteres",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"var errorObtido = jsonData.error;\r",
													"var errorEsperado = \"O nome completo deve ter no máximo 100 caracteres.\";\r",
													"\r",
													"pm.test(\"POST register user (ADMIN) - fullName contendo 101 caracteres - Validar status 400 Bad Request e dados retornados com erro\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"\r",
													"    pm.expect(errorObtido).to.include(errorEsperado);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{tokenADMIN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"Alice Bruna Camila Denise Estela Fernanda Gabriela Helena Ingrid Juliana Kamila Luciana Manuela Natty\",\r\n    \"mail\": \"teste.user.admin.consultoria{{numero}}@qacoders-treinamento.com\",\r\n    \"password\": \"1234@Test\",\r\n    \"confirmPassword\": \"1234@Test\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{cpf}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST register user (ADMIN) - fullName contendo caractere especial",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"var errorObtido = jsonData.error;\r",
													"var errorEsperado = \"Informe o nome e sobrenome com as iniciais em letra maiúscula.\";\r",
													"\r",
													"pm.test(\"POST register user (ADMIN) - fullName contendo caractere especial - Validar status 400 Bad Request e dados retornados com erro\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"\r",
													"    pm.expect(errorObtido).to.include(errorEsperado);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{tokenADMIN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"Alice Bruna C@mil4 Denise Estela Fernanda Gabriela Helena Ingrid Juliana Kamila Luciana Manuela Natty\",\r\n    \"mail\": \"teste.user.admin.consultoria{{numero}}@qacoders-treinamento.com\",\r\n    \"password\": \"1234@Test\",\r\n    \"confirmPassword\": \"1234@Test\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{cpf}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST register user (ADMIN) - fullName em letra minúscula",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"var errorObtido = jsonData.error;\r",
													"var errorEsperado = \"Informe o nome e sobrenome com as iniciais em letra maiúscula.\";\r",
													"\r",
													"pm.test(\"POST register user (ADMIN) - fullName em letra minúscula - Validar status 400 Bad Request e dados retornados com erro\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"\r",
													"    pm.expect(errorObtido).to.include(errorEsperado);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{tokenADMIN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"test user\",\r\n    \"mail\": \"teste.user.admin.consultoria{{numero}}@qacoders-treinamento.com\",\r\n    \"password\": \"1234@Test\",\r\n    \"confirmPassword\": \"1234@Test\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{cpf}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"register"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "mail",
							"item": [
								{
									"name": "POST register user (ADMIN) - mail não informado (vazio)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"var errorObtido = jsonData.error;\r",
													"var errorEsperado = \"O campo e-mail é obrigatório.\";\r",
													"\r",
													"pm.test(\"POST register user (ADMIN) - mail não informado (vazio) - Validar status 400 Bad Request e dados retornados com erro\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"\r",
													"    pm.expect(errorObtido).to.include(errorEsperado);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{tokenADMIN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"Test User\",\r\n    \"mail\": \"\",\r\n    \"password\": \"1234@Test\",\r\n    \"confirmPassword\": \"1234@Test\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{cpf}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST register user (ADMIN) - mail em formato inválido",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"var errorObtido = jsonData.error;\r",
													"var errorEsperado = \"O e-mail informado é inválido. Informe um e-mail no formato [nome@domínio.com].\";\r",
													"\r",
													"pm.test(\"POST register user (ADMIN) - mail em formato inválido - Validar status 400 Bad Request e dados retornados com erro\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"\r",
													"    pm.expect(errorObtido).to.include(errorEsperado);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{tokenADMIN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"Test User\",\r\n    \"mail\": \"teste.user.admin.consultoria{{numero}}qacoders-treinamento\",\r\n    \"password\": \"1234@Test\",\r\n    \"confirmPassword\": \"1234@Test\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{cpf}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"register"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "password e confirmPassword",
							"item": [
								{
									"name": "POST register user (ADMIN) - password não informado (vazio)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"var errorObtido = jsonData.error;\r",
													"var errorEsperado = \"Campo senha é obrigatório\";\r",
													"\r",
													"pm.test(\"POST register user (ADMIN) - password não informado (vazio) - Validar status 400 Bad Request e dados retornados com erro\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"\r",
													"    pm.expect(errorObtido).to.include(errorEsperado);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{tokenADMIN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"Test User\",\r\n    \"mail\": \"teste.user.admin.consultoria{{numero}}@qacoders-treinamento.com\",\r\n    \"password\": \"\",\r\n    \"confirmPassword\": \"1234@Test\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{cpf}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST register user (ADMIN) - confirmPassword não informado (vazio)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"var errorObtido = jsonData.error;\r",
													"var errorEsperado = \"O campo de confirmação de senha não pode ficar vazio.\";\r",
													"\r",
													"pm.test(\"POST register user (ADMIN) - confirmPassword não informado (vazio) - Validar status 400 Bad Request e dados retornados com erro\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"\r",
													"    pm.expect(errorObtido).to.include(errorEsperado);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{tokenADMIN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"Test User\",\r\n    \"mail\": \"teste.user.admin.consultoria{{numero}}@qacoders-treinamento.com\",\r\n    \"password\": \"1234@Test\",\r\n    \"confirmPassword\": \"\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{cpf}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST register user (ADMIN) - password e confirmPassword diferentes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"var errorObtido = jsonData.error;\r",
													"var errorEsperado = \"As senhas não coincidem.\";\r",
													"\r",
													"pm.test(\"POST register user (ADMIN) - password e confirmPassword diferentes - Validar status 400 Bad Request e dados retornados com erro\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"\r",
													"    pm.expect(errorObtido).to.include(errorEsperado);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{tokenADMIN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"Test User\",\r\n    \"mail\": \"teste.user.admin.consultoria{{numero}}@qacoders-treinamento.com\",\r\n    \"password\": \"1234@Test\",\r\n    \"confirmPassword\": \"123@Test\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"{{cpf}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"register"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "accessProfile",
							"item": [
								{
									"name": "POST register user (ADMIN) - accessProfile não informado (vazio)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"var errorObtido = jsonData.error;\r",
													"var errorEsperado = \"O campo perfil de acesso é obrigatório.\";\r",
													"\r",
													"pm.test(\"POST register user (ADMIN) - accessProfile não informado (vazio) - Validar status 400 Bad Request e dados retornados com erro\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"\r",
													"    pm.expect(errorObtido).to.include(errorEsperado);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{tokenADMIN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"Test User\",\r\n    \"mail\": \"teste.user.admin.consultoria{{numero}}@qacoders-treinamento.com\",\r\n    \"password\": \"1234@Test\",\r\n    \"confirmPassword\": \"1234@Test\",\r\n    \"accessProfile\": \"\",\r\n    \"cpf\": \"{{cpf}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"register"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "cpf",
							"item": [
								{
									"name": "POST register user (ADMIN) - cpf não informado (vazio)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"var errorObtido = jsonData.error;\r",
													"var errorEsperado = \"O campo CPF é obrigatório!\";\r",
													"\r",
													"pm.test(\"POST register user (ADMIN) - cpf não informado (vazio) - Validar status 400 Bad Request e dados retornados com erro\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"\r",
													"    pm.expect(errorObtido).to.include(errorEsperado);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{tokenADMIN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"Test User\",\r\n    \"mail\": \"teste.user.admin.consultoria{{numero}}@qacoders-treinamento.com\",\r\n    \"password\": \"1234@Test\",\r\n    \"confirmPassword\": \"1234@Test\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST register user (ADMIN) - cpf contendo letra",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"var errorObtido = jsonData.error;\r",
													"var errorEsperado = \"Campo CPF deve conter apenas números\";\r",
													"\r",
													"pm.test(\"POST register user (ADMIN) - cpf contendo letra - Validar status 400 Bad Request e dados retornados com erro\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"\r",
													"    pm.expect(errorObtido).to.include(errorEsperado);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{tokenADMIN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"Test User\",\r\n    \"mail\": \"teste.user.admin.consultoria{{numero}}@qacoders-treinamento.com\",\r\n    \"password\": \"1234@Test\",\r\n    \"confirmPassword\": \"1234@Test\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"1234567890X\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST register user (ADMIN) - cpf com dez dígitos",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"var errorObtido = jsonData.error;\r",
													"var errorEsperado = \"Deve preencher o CPF com 11 dígitos\";\r",
													"\r",
													"pm.test(\"POST register user (ADMIN) - cpf com dez dígitos - Validar status 400 Bad Request e dados retornados com erro\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"\r",
													"    pm.expect(errorObtido).to.include(errorEsperado);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{tokenADMIN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"Test User\",\r\n    \"mail\": \"teste.user.admin.consultoria{{numero}}@qacoders-treinamento.com\",\r\n    \"password\": \"1234@Test\",\r\n    \"confirmPassword\": \"1234@Test\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"1234567890\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"register"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST register user (ADMIN) - cpf com doze dígitos",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"var errorObtido = jsonData.error;\r",
													"var errorEsperado = \"Deve preencher o CPF com 11 dígitos\";\r",
													"\r",
													"pm.test(\"POST register user (ADMIN) - cpf com doze dígitos - Validar status 400 Bad Request e dados retornados com erro\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"\r",
													"    pm.expect(errorObtido).to.include(errorEsperado);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{tokenADMIN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"Test User\",\r\n    \"mail\": \"teste.user.admin.consultoria{{numero}}@qacoders-treinamento.com\",\r\n    \"password\": \"1234@Test\",\r\n    \"confirmPassword\": \"1234@Test\",\r\n    \"accessProfile\": \"ADMIN\",\r\n    \"cpf\": \"123456789012\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"register"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "PUT - campos informados incorretamente",
					"item": [
						{
							"name": "POST register user (STUDENT) - para \"PUT - campos informados incorretamente\"",
							"item": [
								{
									"name": "POST register user (STUDENT) - para \"PUT - campos informados incorretamente\"",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"POST register user (STUDENT) - para \\\"PUT - campos informados incorretamente\\\" - Validar status 201 Created\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"pm.environment.set(\"mailSTUDENTPut\", jsonData.user.mail);\r",
													"pm.environment.set(\"idSTUDENTPut\", jsonData.user._id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{tokenADMIN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"fullName\": \"STUDENT Consultoria\",\r\n\t\"mail\": \"student.consultoria{{numero}}@qacoders-treinamento.com\",\r\n\t\"password\": \"1234@Test\",\r\n    \"confirmPassword\": \"1234@Test\",\r\n    \"accessProfile\": \"STUDENT\",\r\n    \"cpf\": \"{{cpf}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"register"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "fullName",
							"item": [
								{
									"name": "PUT service user (STUDENT) - fullName contendo 101 caracteres",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"var errorObtido = jsonData.error;\r",
													"var errorEsperado =  \"O nome completo deve ter no máximo 100 caracteres.\";\r",
													"\r",
													"pm.test(\"PUT service user (STUDENT) - fullName contendo 101 caracteres - Validar status 400 Bad Request e dados retornados com erro\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"\r",
													"    pm.expect(errorObtido).to.include(errorEsperado);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{tokenADMIN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"Alice Bruna Camila Denise Estela Fernanda Gabriela Helena Ingrid Juliana Kamila Luciana Manuela Natty\",\r\n    \"mail\": \"student.consultoria536@qacoders-treinamento.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/service/{{idSTUDENTPut}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"service",
												"{{idSTUDENTPut}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT service user (STUDENT) - fullName contendo caractere especial",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"var errorObtido = jsonData.error;\r",
													"var errorEsperado =  \"Informe o nome e sobrenome com as iniciais em letra maiúscula.\";\r",
													"\r",
													"pm.test(\"PUT service user (STUDENT) - fullName contendo caractere especial - Validar status 400 Bad Request e dados retornados com erro\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"\r",
													"    pm.expect(errorObtido).to.include(errorEsperado);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{tokenADMIN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"Alice Bruna C@mil4 Denise Estela Fernanda Gabriela Helena Ingrid Juliana Kamila Luciana Manuela Natty\",\r\n    \"mail\": \"student.consultoria536@qacoders-treinamento.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/service/{{idSTUDENTPut}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"service",
												"{{idSTUDENTPut}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT service user (STUDENT) - fullName em letra minúscula",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"var errorObtido = jsonData.error;\r",
													"var errorEsperado = \"Informe o nome e sobrenome com as iniciais em letra maiúscula.\";\r",
													"\r",
													"pm.test(\"PUT service user (STUDENT) - fullName em letra minúscula - Validar status 400 Bad Request e dados retornados com erro\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"\r",
													"    pm.expect(errorObtido).to.include(errorEsperado);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{tokenADMIN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"test user\",\r\n    \"mail\": \"student.consultoria536@qacoders-treinamento.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/service/{{idSTUDENTPut}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"service",
												"{{idSTUDENTPut}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "mail",
							"item": [
								{
									"name": "PUT service user (STUDENT) - mail inválido (sem @)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"var errorObtido = jsonData.error;\r",
													"var errorEsperado = \"O e-mail informado é inválido. Informe um e-mail no formato [nome@domínio.com].\";\r",
													"\r",
													"pm.test(\"PUT service user (STUDENT) - mail inválido (sem @) - Validar status 400 Bad Request e dados retornados com erro\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"\r",
													"    pm.expect(errorObtido).to.include(errorEsperado);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{tokenADMIN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"fullName\": \"Teste User STUDENT Consultoria Alterado Três\",\r\n    \"mail\": \"teste.user.student.consultoria.alterado.tres.qacoders-treinamento.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/service/{{idSTUDENTPut}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"service",
												"{{idSTUDENTPut}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "password e confirmPassword",
							"item": [
								{
									"name": "PUT password service user (STUDENT) - password não informado (vazio)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"var errorObtido = jsonData.error;\r",
													"var errorEsperado = \"Campo senha é obrigatório\";\r",
													"\r",
													"pm.test(\"PUT password service user (STUDENT) - password não informado (vazio) - Validar status 400 Bad Request e dados retornados com erro\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"\r",
													"    pm.expect(errorObtido).to.include(errorEsperado);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{tokenADMIN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"password\": \"\",\r\n    \"confirmPassword\": \"1234@Test\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/service/password/{{idSTUDENTPut}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"service",
												"password",
												"{{idSTUDENTPut}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT password service user (STUDENT) - confirmPassword não informado (vazio)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"var errorObtido = jsonData.error;\r",
													"var errorEsperado = \"O campo de confirmação de senha não pode ficar vazio.\";\r",
													"\r",
													"pm.test(\"PUT password service user (STUDENT) - confirmPassword não informado (vazio) - Validar status 400 Bad Request e dados retornados com erro\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"\r",
													"    pm.expect(errorObtido).to.include(errorEsperado);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{tokenADMIN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"password\": \"1234@Test\",\r\n    \"confirmPassword\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/service/password/{{idSTUDENTPut}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"service",
												"password",
												"{{idSTUDENTPut}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT password service user (STUDENT) - password e confirmPassword diferentes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"var errorObtido = jsonData.error;\r",
													"var errorEsperado = \"As senhas não coincidem.\";\r",
													"\r",
													"pm.test(\"PUT password service user (STUDENT) - password e confirmPassword diferentes - Validar status 400 Bad Request e dados retornados com erro\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"\r",
													"    pm.expect(errorObtido).to.include(errorEsperado);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{tokenADMIN}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"password\": \"1234@Test\",\r\n    \"confirmPassword\": \"123@Test\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/service/password/{{idSTUDENTPut}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"service",
												"password",
												"{{idSTUDENTPut}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "PUT e DEL - campos informados corretamente",
					"item": [
						{
							"name": "PUT status service user (STUDENT) - status false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var msgObtida = jsonData.msg;\r",
											"var msgEsperada = \"Status do usuario atualizado com sucesso para status false.\";\r",
											"\r",
											"pm.test(\"PUT status service user (STUDENT) - status false - Validar status 200 OK e dados retornados com sucesso\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"\r",
											"    pm.expect(msgObtida).to.include(msgEsperada);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{tokenADMIN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/service/status/{{idSTUDENT}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"service",
										"status",
										"{{idSTUDENT}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DEL student service user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var msgObtida = jsonData.msg;\r",
											"var msgEsperada = \"Estudante deletado com sucesso!.\";\r",
											"\r",
											"pm.test(\"DEL student service user - Validar status 200 OK e dados retornados com sucesso\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"\r",
											"    pm.expect(msgObtida).to.include(msgEsperada);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{tokenADMIN}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/user/service/student/{{idSTUDENT}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"service",
										"student",
										"{{idSTUDENT}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT status service user (ADMIN) - campo status false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var msgObtida = jsonData.msg;\r",
											"var msgEsperada = \"Status do usuario atualizado com sucesso para status false.\";\r",
											"\r",
											"pm.test(\"PUT status service user (ADMIN) - campo status false - Validar status 200 OK e dados retornados com sucesso\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"\r",
											"    pm.expect(msgObtida).to.include(msgEsperada);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{tokenSYSADMIN}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/service/status/{{idADMIN}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"service",
										"status",
										"{{idADMIN}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DEL admin service user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"var msgObtida = jsonData.msg;\r",
											"var msgEsperada = \"Admin deletado com sucesso!.\";\r",
											"\r",
											"pm.test(\"DEL admin service user - Validar status 200 OK e dados retornados com sucesso\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"\r",
											"    pm.expect(msgObtida).to.include(msgEsperada);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{tokenSYSADMIN}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/user/service/admin/{{idADMIN}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"service",
										"admin",
										"{{idADMIN}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"function gerarNumerosAleatorios(qtdeNumeros) {",
					"  var text = \"\";",
					"  var possible = \"0123456789\";",
					"",
					"  for (var i = 0; i < qtdeNumeros; i++)",
					"    text += possible.charAt(Math.floor(Math.random() * possible.length));",
					"",
					"  return text;",
					"}",
					"",
					"pm.environment.set(\"numero\", gerarNumerosAleatorios(6));",
					"",
					"function cpf() {",
					"  const rnd = (n) => Math.round(Math.random() * n);",
					"  const mod = (base, div) => Math.round(base - Math.floor(base / div) * div)",
					"  const n = Array(9).fill('').map(() => rnd(9));",
					"",
					"  let d1 = n.reduce((total, number, index) => (total + (number * (10 - index))), 0)",
					"  d1 = 11 - mod(d1, 11);",
					"  if (d1 >= 10) d1 = 0;",
					"  ",
					"  let d2 = (d1 * 2) + n.reduce((total, number, index) => (total + (number * (11 - index))), 0)",
					"  d2 = 11 - mod(d2, 11);",
					"  if (d2 >= 10) d2 = 0;",
					"",
					"  return `${n.join('')}${d1}${d2}`",
					"}",
					"",
					"pm.environment.set(\"cpf\", cpf());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}